syntax = "proto3";
package cosmonaut.blog.blog;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "blog/post.proto";
import "blog/comment.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";

option go_package = "github.com/cosmonaut/blog/x/blog/types";

// Query defines the gRPC querier service.
service Query {
    // Queries a list of posts items.
	rpc Posts(QueryPostsRequest) returns (QueryPostsResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/posts";
	}

// Queries a comment by id.
	rpc Comment(QueryGetCommentRequest) returns (QueryGetCommentResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/comment/{id}";
	}

	// Queries a list of comment items.
	rpc CommentAll(QueryAllCommentRequest) returns (QueryAllCommentResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/comment";
	}

// this line is used by starport scaffolding # 2
}

message QueryPostsRequest {
  // Adding pagination to request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPostsResponse {
  // Returning a list of posts
  repeated Post Post = 1;
  // Adding pagination to response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetCommentRequest {
	uint64 id = 1;
}

message QueryGetCommentResponse {
	Comment Comment = 1 [(gogoproto.nullable) = false];
}

message QueryAllCommentRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCommentResponse {
	repeated Comment Comment = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
